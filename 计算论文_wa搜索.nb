(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 12.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[     86361,       1545]
NotebookOptionsPosition[     85921,       1529]
NotebookOutlinePosition[     86270,       1544]
CellTagsIndexPosition[     86227,       1541]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["who am i?", "WolframAlphaLong",
 CellChangeTimes->{{3.872388308236629*^9, 3.87238831108*^9}},
 CellLabel->"In[1]:=",ExpressionUUID->"d3f4680f-0ce6-47b1-a0bf-1207b821b54c"],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = "who am i?", Typeset`opts$$ = {
   AppearanceElements -> {
     "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
      "Sources"}, Asynchronous -> All, 
    TimeConstraint -> {20, Automatic, Automatic, Automatic}, 
    Method -> {
     "Formats" -> {"cell", "minput", "msound", "dataformats"}, "Server" -> 
      "https://api.wolframalpha.com/v1/"}}, Typeset`elements$$ = {
   "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
    "Sources"}, Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Input interpretation", "scanner" -> "Identity", "id" -> 
     "Input", "position" -> "100", "error" -> "false", "numsubpods" -> "1"}, {
    
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox["\"current geoIP location\"", TraditionalForm], 
             PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"plaintext,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod2$$ = XMLElement[
   "pod", {"title" -> "Inferred local map", "scanner" -> "Data", "id" -> 
     "Map:InternetData", "position" -> "200", "error" -> "false", 
     "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["microsources", {}, {"\n   ", 
         XMLElement["microsource", {}, {"InternetData"}], "\n   ", 
         XMLElement["microsource", {}, {"OpenStreetMap"}], "\n   ", 
         XMLElement["microsource", {}, {"CityData"}], "\n  "}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TemplateBox[{
              GraphicsBox[
               RasterBox[CompressedData["
1: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
                "], Automatic, {0, 
                255}], PlotRangePadding -> None, ImageSize -> {550, 256}, 
               PlotRange -> {{0, 550}, {0, 256}}], 
              StyleBox[
               
               RowBox[{
                "\"(\"", "\[NoBreak]", 
                 "\"based on current OpenStreetMap data\"", "\[NoBreak]", 
                 "\")\""}], {
               FontColor -> GrayLevel[0.7], FontFamily -> "Roboto", FontSize -> 
                10, 
                GrayLevel[0.5], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                LineIndent -> 0}]}, "Labeled", DisplayFunction -> (FormBox[
               GridBox[{{
                  TagBox[
                   ItemBox[
                    PaneBox[
                    TagBox[#, "SkipImageSizeLevel"], 
                    Alignment -> {Center, Baseline}, BaselinePosition -> 
                    Baseline], DefaultBaseStyle -> "Labeled"], 
                   "SkipImageSizeLevel"]}, {
                  
                  ItemBox[#2, Alignment -> {Left, Inherited}, 
                   DefaultBaseStyle -> "LabeledLabel"]}}, 
                GridBoxAlignment -> {
                 "Columns" -> {{Center}}, "Rows" -> {{Center}}}, AutoDelete -> 
                False, GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                BaselinePosition -> {1, 1}], TraditionalForm]& ), 
             InterpretationFunction -> (RowBox[{
                StyleBox[
                "Labeled", FontFamily -> "Roboto", 
                 FontSize -> -1 + Inherited], "[", 
                RowBox[{#, ",", #2, ",", 
                  TemplateBox[{
                    GridBox[{{
                    StyleBox[
                    "Bottom", FontFamily -> "Roboto", 
                    FontSize -> -1 + Inherited], 
                    StyleBox[
                    "Left", FontFamily -> "Roboto", 
                    FontSize -> -1 + Inherited]}}, RowSpacings -> 1, 
                    ColumnSpacings -> 1, RowAlignments -> Baseline, 
                    ColumnAlignments -> Center]}, "Matrix", 
                   DisplayFunction -> (
                    RowBox[{"(", "\[NoBreak]", #, "\[NoBreak]", ")"}]& ), 
                   InterpretationFunction -> (#& )]}], "]"}]& )], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n  ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n "}], 
     XMLElement["states", {"count" -> "2"}, {
       XMLElement[
       "statelist", {
        "count" -> "13", "value" -> "260 kilometers across", "delimiters" -> 
         ""}, {
         XMLElement[
         "state", {
          "name" -> "8 kilometers across", "input" -> 
           "Map:InternetData__8 kilometers across"}, {}], 
         XMLElement[
         "state", {
          "name" -> "20 kilometers across", "input" -> 
           "Map:InternetData__20 kilometers across"}, {}], 
         XMLElement[
         "state", {
          "name" -> "30 kilometers across", "input" -> 
           "Map:InternetData__30 kilometers across"}, {}], 
         XMLElement[
         "state", {
          "name" -> "60 kilometers across", "input" -> 
           "Map:InternetData__60 kilometers across"}, {}], 
         XMLElement[
         "state", {
          "name" -> "130 kilometers across", "input" -> 
           "Map:InternetData__130 kilometers across"}, {}], 
         XMLElement[
         "state", {
          "name" -> "260 kilometers across", "input" -> 
           "Map:InternetData__260 kilometers across"}, {}], 
         XMLElement[
         "state", {
          "name" -> "520 kilometers across", "input" -> 
           "Map:InternetData__520 kilometers across"}, {}], 
         XMLElement[
         "state", {
          "name" -> "1000 kilometers across", "input" -> 
           "Map:InternetData__1000 kilometers across"}, {}], 
         XMLElement[
         "state", {
          "name" -> "2100 kilometers across", "input" -> 
           "Map:InternetData__2100 kilometers across"}, {}], 
         XMLElement[
         "state", {
          "name" -> "4100 kilometers across", "input" -> 
           "Map:InternetData__4100 kilometers across"}, {}], 
         XMLElement[
         "state", {
          "name" -> "8100 kilometers across", "input" -> 
           "Map:InternetData__8100 kilometers across"}, {}], 
         XMLElement[
         "state", {
          "name" -> "13000 kilometers across", "input" -> 
           "Map:InternetData__13000 kilometers across"}, {}], 
         XMLElement[
         "state", {
          "name" -> "26000 kilometers across", "input" -> 
           "Map:InternetData__26000 kilometers across"}, {}]}], 
       XMLElement[
       "state", {
        "name" -> "Non-metric", "input" -> 
         "Map:InternetData__Non-metric"}, {}]}]}], Typeset`pod3$$ = 
   XMLElement[
   "pod", {"title" -> "Inferred nearest city center", "scanner" -> "Data", 
     "id" -> "InferredNearestCityCenter:InternetData", "position" -> "300", 
     "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["microsources", {}, {"\n    ", 
         XMLElement["microsource", {}, {"InternetData"}], "\n   "}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FormBox[
             TagBox[
              TagBox["\"Beijing\"", 
               $CellContext`TagBoxWrapper[
               "Entity" -> {CityData, {"Beijing", "Beijing", "China"}}]], 
              Identity], TraditionalForm], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"plaintext,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod4$$ = XMLElement[
   "pod", {"title" -> "IP address", "scanner" -> "Data", "id" -> 
     "IPAddress:InternetData", "position" -> "400", "error" -> "false", 
     "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["microsources", {}, {"\n    ", 
         XMLElement["microsource", {}, {"InternetData"}], "\n   "}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                StyleBox[
                 TagBox[
                  GridBox[{{
                    TagBox[
                    PaneBox[
                    "\"IPv4 address\"", 
                    BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                    $CellContext`TagBoxWrapper["Label"]], 
                    FormBox[
                    TagBox[
                    TagBox["\"220.249.16.210\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {$CellContext`InternetData, 
                    "220.249.16.210"}]], Identity], TraditionalForm]}, {
                    TagBox[
                    PaneBox[
                    "\"IPv6\"", 
                    BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                    $CellContext`TagBoxWrapper["Label"]], 
                    "\"::ffff:dcf9:10d2\""}}, 
                   GridBoxAlignment -> {
                    "Columns" -> {Left, Left}, "Rows" -> {{Baseline}}}, 
                   AutoDelete -> False, 
                   GridBoxBackground -> {"Columns" -> {None, None}}, 
                   GridBoxFrame -> {
                    "Columns" -> {{True}}, "Rows" -> {{True}}}, 
                   GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                   GridBoxSpacings -> {
                    "Columns" -> {{1.5}, 2}, "Rows" -> {{1}}}, FrameStyle -> 
                   GrayLevel[0.84], BaselinePosition -> Automatic, 
                   AllowScriptLevelChange -> False], "Grid"], 
                 LineSpacing -> {0.9, 0, 1.5}, LineIndent -> 0, StripOnInput -> 
                 False]}, {
                PaneBox[
                 TagBox[
                  StyleBox[
                   
                   RowBox[{
                    "\"(\"", "\[NoBreak]", "\"as seen by Wolfram|Alpha\"", 
                    "\[NoBreak]", "\")\""}], {
                    GrayLevel[0.6], "Label", 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 BaseStyle -> {LineIndent -> 0}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
              "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"plaintext,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Grid"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Full IPv6", "input" -> 
         "IPAddress:InternetData__Full IPv6"}, {}]}]}], Typeset`pod5$$ = 
   XMLElement[
   "pod", {"title" -> "IP address registrant", "scanner" -> "Data", "id" -> 
     "HostInformationPodIP:InternetData", "position" -> "500", "error" -> 
     "false", "numsubpods" -> "1", "primary" -> "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["microsources", {}, {"\n    ", 
         XMLElement["microsource", {}, {"InternetData"}], "\n   "}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             TagBox[
              GridBox[{{
                 TagBox[
                  PaneBox[
                  "\"name\"", 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 StyleBox[
                 "\"China Unicom\"", {
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                   0}]}, {
                 TagBox[
                  PaneBox[
                  "\"location\"", 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 FormBox[
                  TemplateBox[{",", "\",\"", 
                    TagBox[
                    TagBox["\"Beijing\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {CityData, {"Beijing", "Beijing", "China"}}]],
                     Identity], 
                    TagBox[
                    TagBox["\"China\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {CountryData, "China"}]], Identity]}, 
                   "RowWithSeparators"], TraditionalForm]}}, 
               GridBoxAlignment -> {
                "Columns" -> {Left, Left}, "Rows" -> {{Baseline}}}, 
               AutoDelete -> False, 
               GridBoxBackground -> {"Columns" -> {None, None}}, 
               GridBoxFrame -> {"Columns" -> {{True}}, "Rows" -> {{True}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {"Columns" -> {{1.5}, 2}, "Rows" -> {{1}}}, 
               FrameStyle -> GrayLevel[0.84], BaselinePosition -> Automatic, 
               AllowScriptLevelChange -> False], "Grid"], 
             LineSpacing -> {0.9, 0, 1.5}, LineIndent -> 0, StripOnInput -> 
             False], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"plaintext,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Grid"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "2"}, {
       XMLElement[
       "state", {
        "name" -> "Show map", "input" -> 
         "HostInformationPodIP:InternetData__Show map"}, {}], 
       XMLElement[
       "state", {
        "name" -> "More", "input" -> 
         "HostInformationPodIP:InternetData__More"}, {}]}], 
     XMLElement["infos", {"count" -> "1"}, {
       XMLElement["info", {}, {
         XMLElement[
         "link", {
          "url" -> 
           "http://maps.google.com?ie=UTF8&z=12&t=k&ll=39.93%2C116.4&q=39.93%\
20N%2C%20116.4%20E", "text" -> "Satellite image"}, {}]}]}]}], 
   Typeset`aux1$$ = {True, False, {False}, True}, Typeset`aux2$$ = {
   True, False, {False}, True}, Typeset`aux3$$ = {True, False, {False}, True},
    Typeset`aux4$$ = {True, False, {False}, True}, Typeset`aux5$$ = {
   True, False, {False}, True}, Typeset`asyncpods$$ = {}, Typeset`nonpods$$ = {
    XMLElement["assumptions", {"count" -> "1"}, {
      XMLElement[
      "assumption", {
       "type" -> "Clash", "word" -> "who am i", "template" -> 
        "Assuming \"who am i\" is host information${separator}Use as ${desc} \
or ${desc} instead", "count" -> "3", "pulldown" -> "false", "default" -> 
        "{\"C\", \"who am i\"} -> {\"InternetSitesWord\", \"dflt\"}"}, {
        XMLElement[
        "value", {
         "name" -> "InternetSitesWord", "desc" -> "host information", "input" -> 
          "{\"C\", \"who am i\"} -> {\"InternetSitesWord\"}"}, {}], 
        XMLElement[
        "value", {
         "name" -> "Miscellaneous", "desc" -> "a phrase", "input" -> 
          "{\"C\", \"who am i\"} -> {{\"Miscellaneous\", \"a phrase\"}}"}, \
{}], 
        XMLElement[
        "value", {
         "name" -> "Movie", "desc" -> "a movie", "input" -> 
          "{\"C\", \"who am i\"} -> {\"Movie\"}"}, {}]}]}], 
    XMLElement["sources", {"count" -> "2"}, {
      XMLElement[
      "source", {
       "url" -> 
        "https://www6b3.wolframalpha.com/sources/\
InternetDataSourceInformationNotes.html", "text" -> "Internet data"}, {}], 
      XMLElement[
      "source", {
       "url" -> 
        "https://www6b3.wolframalpha.com/sources/\
OpenStreetMapSourceInformationNotes.html", "text" -> 
        "Open street map"}, {}]}]}, Typeset`initdone$$ = 
   FrontEnd`SuppressEvaluationHash[True], Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> 
    "false", {"http://www.w3.org/XML/1998/namespace", "space"} -> "preserve", 
    "numpods" -> "5", "datatypes" -> "Internet", "timedout" -> "", 
    "timedoutpods" -> "", "timing" -> "0.6920000000000001", "parsetiming" -> 
    "0.154", "parsetimedout" -> "false", "recalculate" -> "", "id" -> 
    "MSP291323iff76b45dgfh4e00000de8d59i8d3fi0fb", "host" -> 
    "https://www6b3.wolframalpha.com", "server" -> "3", "related" -> 
    "https://www6b3.wolframalpha.com/api/v1/relatedQueries.jsp?id=\
MSPa291423iff76b45dgfh4e00002a117i69945f888i3629183885576317489", "version" -> 
    "2.6", "inputstring" -> "who am i"}, Typeset`sessioninfo$$ = {
   "TimeZone" -> 8., 
    "Date" -> {2022, 9, 17, 15, 25, 15.25183`7.935896940962622}, "Line" -> 1, 
    "SessionID" -> 19935362239227115753}, Typeset`showpods$$ = {1, 2, 3, 4, 
   5}, Typeset`failedpods$$ = {}, Typeset`chosen$$ = {}, Typeset`open$$ = 
   False, Typeset`newq$$ = "who am i?"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
         Typeset`aux5$$}, Typeset`chosen$$, Typeset`open$$, 
        Typeset`elements$$, Typeset`q$$, Typeset`opts$$, Typeset`nonpods$$, 
        Typeset`queryinfo$$, Typeset`sessioninfo$$, Typeset`showpods$$, 
        Typeset`failedpods$$, Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{741., {381., 387.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     And[
      Not[Typeset`initdone$$ === True], 
      Not[Typeset`initdone$$ === FrontEnd`SuppressEvaluationHash[True]]], 
     Null; WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{
        Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$}], Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True]],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "Print", "WolframAlphaFullOutput",
 CellChangeTimes->{
  3.872388315282864*^9},ExpressionUUID->"cffb2d7e-aaa3-4b17-a7ee-\
9e4d03a1cf32"]
}, Open  ]]
},
WindowSize->{808, 911},
WindowMargins->{{328, Automatic}, {Automatic, 73}},
FrontEndVersion->"12.0 for Mac OS X x86 (64-bit) (2019\:5e744\:67088\:65e5)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 177, 2, 41, "WolframAlphaLong",ExpressionUUID->"d3f4680f-0ce6-47b1-a0bf-1207b821b54c"],
Cell[760, 26, 85145, 1500, 778, "Print",ExpressionUUID->"cffb2d7e-aaa3-4b17-a7ee-9e4d03a1cf32"]
}, Open  ]]
}
]
*)

(* End of internal cache information *)

